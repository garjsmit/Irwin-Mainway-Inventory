package Model;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
/** Product class, includes an ObservableList of associatedParts, which may have many, one, or be empty. */
public class Product {

    protected int productId, productStock, productMin, productMax;
    protected String productName;
    protected double productPrice;
    protected ObservableList<Part> associatedParts = FXCollections.observableArrayList();


    public Product(int productId, int productStock, int productMin, int productMax, String productName, double productPrice){
        this.productId = productId;
        this.productStock = productStock;
        this.productMin = productMin;
        this.productMax = productMax;
        this.productName = productName;
        this.productPrice = productPrice;
        this.associatedParts = associatedParts;
    }

    /**
     * @param productId Product ID, unique and autogenerated
     * */
    public void setProductId(int productId) { this.productId = productId;    }

    /**
     * @param productStock Product Stock
     * */
    public void setProductStock(int productStock) { this.productStock = productStock;    }

    /**
     * @param productMin Product minimum
     * */
    public void setProductMin(int productMin) {  this.productMin = productMin;   }
    /**
     * @param productMax Product maximum
     * */
    public void setProductMax(int productMax) {  this.productMax = productMax;    }
    /**
     * @param productName Product name
     * */
    public void setProductName(String productName) {  this.productName = productName;    }
    /**
     * @param productPrice Product price
     * */
    public void setProductPrice(double productPrice) {   this.productPrice = productPrice;    }
    /**
     * @return returns product's id
     * */
    public int getProductId() {  return productId; }

    /**
     * @return returns product's stock
     * */
    public int getProductStock() {  return productStock; }

    /**
     * @return returns product's minimum
     * */
    public int getProductMin() {   return productMin;  }

    /**
     * @return returns product's maximum
     * */
    public int getProductMax() {   return productMax;    }

    /**
     * @return returns product's name
     * */
    public String getProductName() {   return productName;   }

    /**
     * @return returns product's price
     * */
    public double getProductPrice() {   return productPrice;    }

    /**
     * @return returns true if product is found and successfully deleted. returns false if product is not successfully delteed.
     * */
    public boolean deleteAssociatedPart(Part partToRemove) {
        for (int i = 0; i < associatedParts.size(); i++)
            if (associatedParts.get(i).getId() == partToRemove.getId())
                associatedParts.remove(i);
        return true;
    }

    /**
     * @param partToAdd adds partToAdd to the ObservableList of associatedParts
     * */
    public void addAssociatedPart(Part partToAdd){
        associatedParts.add(partToAdd);
    }
    /**
     * @param allAssociatedParts  adds multiple associated parts to a product
     * */
    public void addAllAssociatedParts(ObservableList<Part> allAssociatedParts) { associatedParts.addAll(allAssociatedParts); }

    /**
     * @return returns associated parts
     * */
    public ObservableList<Part> getAssociatedParts() {
        return associatedParts;
    }

}
